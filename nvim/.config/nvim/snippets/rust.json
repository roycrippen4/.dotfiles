{"timer":{"prefix":"timer","body":["let now = std::time::Instant::now();","println!(\"Execution time: {:?}\", now.elapsed());"]},"aoc":{"body":["fn evaluate(data: &str) -> usize {","    dbg!(data);","    0","}","","pub fn solve() -> usize {","    evaluate(include_str!(\"data\/data.txt\"))","}","","#[allow(unused)]","#[cfg(test)]","mod test {","    use crate::util::{validate, Day::Day${1:xx}, Part::Part${2:x}};","","    use super::{evaluate, solve};","","    #[test]","    fn test_solve() {","        dbg!(solve());","    }","","    #[test]","    fn test_evaluate() {","        let data = include_str!(\"data\/example.txt\");","        let result = evaluate(data);","        dbg!(result);","    }","}"],"prefix":"aoc"},"!unused":{"prefix":"!unused","body":"#![allow(unused)]"},"!allow_dead_code-1":{"prefix":"!allow_dead_code","body":"#![allow(dead_code)]"},"ignore":{"prefix":"ignore","body":"#[ignore]"},"unused":{"prefix":"unused","body":"#[allow(unused)]"},"|anon|":{"prefix":"anon","body":"|${1:x}| ${2:\/* body *\/} "},"!allow_dead_code":{"prefix":"allow_dead_code","body":"#[allow(dead_code)]"},"derive":{"prefix":"derive","body":"#[derive(${1:Debug}${2:})]"}}
{"!unused":{"prefix":"!unused","body":"#![allow(unused)]"},"aoc":{"body":["use crate::data;","","fn evaluate(data: &str) -> usize {","    dbg!(data);","    0","}","","pub fn solve() -> usize {","    evaluate(data!())","}","","#[allow(unused)]","#[cfg(test)]","mod test {","    use crate::{","        example,","        util::{validate, Day::Day${1:xx}, Part::Part${2:x}},","    };","","    use super::{evaluate, solve};","","    #[test]","    fn test_solve() {","        dbg!(solve());","    }","","    #[test]","    fn test_evaluate() {","        let result = evaluate(example!());","        dbg!(result);","    }","}"],"prefix":"aoc"},"!allow_dead_code-1":{"prefix":"!allow_dead_code","body":"#![allow(dead_code)]"},"!allow_dead_code":{"prefix":"allow_dead_code","body":"#[allow(dead_code)]"},"timer":{"prefix":"timer","body":["let now = std::time::Instant::now();","println!(\"Execution time: {:?}\", now.elapsed());"]},"|anon|":{"prefix":"anon","body":"|${1:x}| ${2:\/* body *\/} "},"unused":{"prefix":"unused","body":"#[allow(unused)]"},"derive":{"prefix":"derive","body":"#[derive(${1:Debug}${2:})]"},"ignore":{"prefix":"ignore","body":"#[ignore]"}}
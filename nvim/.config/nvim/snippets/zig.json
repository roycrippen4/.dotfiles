{"gpa":{"prefix":"gpa","body":["var gpa = std.heap.GeneralPurposeAllocator(.{}){};","const allocator = gpa.allocator();","defer {","    const deinit = gpa.deinit();","    if (deinit == .leak) std.testing.expect(false) catch @panic(\"LEAK DETECTED\");","}"]},"expectEqual":{"prefix":"expectEqual","body":"try std.testing.expectEqual(${1:expected}, ${2:result});"},"expect":{"prefix":"expect","body":"try std.testing.expect(${1:bool});"},"print":{"body":"std.debug.print(\"${1:content}\\n\", .{${2:items}});","prefix":"print"},"expectEqualStrings":{"prefix":"expectEqualStrings","body":"try std.testing.expectEqualStrings(${1:expected}, ${2:actual});"},"eql":{"body":"std.mem.eql(${1:comptime T: type}, ${2:a: []const T}, ${3:b: []const T})","prefix":"eql"},"aoc":{"prefix":"aoc","body":["const std = @import(\"std\");","const util = @import(\"util.zig\");","","const input = @embedFile(\"data/day${1:01}/data.txt\");","const example = @embedFile(\"data/day$1/example.txt\");","","pub fn main() !void {","    var gpa = std.heap.GeneralPurposeAllocator(.{}){};","    const allocator = gpa.allocator();","    defer {","        const deinit = gpa.deinit();","        if (deinit == .leak) std.testing.expect(false) catch @panic(\"LEAK DETECTED\");","    }","","    _ = try util.validate(part1, 42, util.Day.${2:day}, util.Part.one, allocator);","    _ = try util.validate(part2, 42, util.Day.$2, util.Part.two, allocator);","}","","pub fn part1(allocator: std.mem.Allocator) anyerror!usize {","    const lines = util.lines(example, allocator);","    for (lines) |line| {","        std.debug.print(\"{s}\\n\", .{line});","    }","    return 42;","}","","pub fn part2(allocator: std.mem.Allocator) anyerror!usize {","    const lines = util.lines(example, allocator);","    for (lines) |line| {","        std.debug.print(\"{s}\\n\", .{line});","    }","    return 42;","}","","test \"part1\" {","    var gpa = std.heap.GeneralPurposeAllocator(.{}){};","    const allocator = gpa.allocator();","    const answer = try part1(allocator);","","    std.debug.print(\"\\n\\nAnswer: {d}\\n\\n\", .{answer});","}","","test \"part2\" {","    var gpa = std.heap.GeneralPurposeAllocator(.{}){};","    const allocator = gpa.allocator();","    const answer = try part2(allocator);","","    std.debug.print(\"\\n\\nAnswer: {d}\\n\\n\", .{answer});","}"]}}
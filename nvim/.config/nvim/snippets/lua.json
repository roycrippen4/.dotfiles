{"callback":{"body":["callback = function()","  ${1:-- code}","end,"],"prefix":"callback"},"schedule_wrap":{"body":["vim.schedule_wrap(function()","  ${1:-- code}","end)"],"prefix":"schedule_wrap"},"whichkey":{"body":["local wk = require('which-key')","wk.add({","  {","    mode = { '${1:mode}' },","    { '${2:lhs}', '${3:rhs}', desc = '${4:desc}', icon = '${5:icon}' },","  },","})"],"prefix":"whichkey"},"dnl":{"body":"---@diagnostic disable-next-line","prefix":"dnl"},"ignore":{"body":"-- stylua: ignore","prefix":"ignore"},"mode + lhs + rhs + opts":{"body":"vim.keymap.set(${1:'n'}, ${2:lhs}, ${3:rhs}, { ${4:opts} })","prefix":"keymap"},"autocmd (Filetype)":{"body":["vim.api.nvim_create_autocmd(\"${1:Event}\", {","\tpattern = \"${2:ft}\",","\tcallback = function()","\t\t${0:-- code}","\tend,","})"],"prefix":"new-autocmd"},"wk (basic)":{"body":["{","  mode = 'n',","  { '${1:lhs}', ${2:rhs}, desc = '${3:desc}', icon = '${4:icon}' },","},"],"prefix":"wk (basic)"},"schedule":{"body":["vim.schedule(function()","  ${1:-- code}","end)"],"prefix":"schedule"},"timer":{"body":["local t_start = vim.uv.hrtime()","local t_end = vim.uv.hrtime()","print('${1:label} took: ' .. (t_end - t_start) \/ 1e6 .. 'ms')"],"prefix":"timer"},"file exists":{"body":"local fileExists = vim.uv.fs_stat(\"${1:filepath}\") ~= nil","prefix":"file exists"}}